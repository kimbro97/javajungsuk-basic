public class Ex7_7 {
    public static void main(String[] args) {
        Car c = null;
        FireEngin fireEngin = new FireEngin();
        FireEngin fireEngin2 = null;

        fireEngin.water();
        c = fireEngin;
//        c.water() 컴파일 에러 Car 타입의 참조변수로는 water()를 호출할 수 없다.
        fireEngin2 = (FireEngin) c;
        fireEngin2.water();
    }
}
class Car {
    String color;
    int door;
    void drive() {
        System.out.println("drive, Brrrr~~~");
    }
    void stop() {
        System.out.println("stop!!!");
    }
}
class FireEngin extends Car {
    void water() {
        System.out.println("water!!!");
    }
}

/**
 * 접근제어자 public, protected, (default), private
 * 그외제어자 static, final, abstract, native, transient, synchronized, volatile, strictfp
 *
 * 캡슐화와 접근 제어자
 * 클래스나 멤버, 주로 멤버에 접근 제어자를 사용하는 이유는 클래스의 내부에 선언된 데이테를 보호하기 위해서이다.
 * 데이터가 유효한 값을 유지하도록, 또는 비밀번호와 같은 데이터를 외부에서 함부로 변경하지 못하도록 하기 위해서는 외부로부터의 접근을 제한하는거이 필요하다.
 * 이것을 데이터 감추기라고 하며, 객체지향개념의 캡슐화에 해당하는 내용이다.
 * 외부에서 접근할 필요가 없는 멤버들을 private으로 지정하여 외부 노출시키지 않음으로써 복잡성을 줄일 수 있다. 이것 역시 캡슐화에 해당한다.
 *
 * 정리
 * 정근 제어자를 사용하는 이유
 * - 외부로부터 데이터를 보호하기 위해서
 * - 외부로부터 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해서 사용한다.
 *
 * 접근 제어자를 사용하지 않으면 값을 바꾸는데 막을 방법이 없다.
 * 멤버 변수를 private 또는 protected로 제한하고 멤버변수의 값을
 * 변경할 수 있는 public 메서드를 제함으로써 간접적으로 멤버변수의 값을 다룰 수 있도록 하는것이 바라직하다
 * get으로 시작하는 메서드를 getter set으로 시작하는 메서드를 setter라고 부른다
 *
 *
 * 다형성
 *
 * 다형성이란 여러 거지 형태를 가질 수 있는 능력을 의미하며, 자바에서는 한 타입의 참조변수로
 * 여러 타입으리 객체를 참조할 수 있도록 함으로써 다형성을 프로그램적으로 구현하였다.
 * 이를 좀 더 구체적으로 말하자면, 조상클래스 타입의 팜조변수로 자손클래스의 인스턴스를
 * 참조할 수 있도록 하였다는 것이다.
 *
 * 상속관계의 타입을 불일치는 인스턴스는 인스턴스의 모든 멤버를 사용 할 수 없다.
 * 둘 다 같은 타입의 인스턴스지만 참조변수의 타입에 따라 사용 할 수 있는 멤버의 개수가 달라진다.
 * 반대로 자손타입의 참조변수로 조상타입의 인스턴스를 참조하는것은 불가능하다.
 *
 * 정리
 * 조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있다.
 * 반대로 자손타입의 참조변수로 조상탕비의 인스턴스를 참조할 수는 없다.
 *
 * 참조변수의 형변환
 *
 * 기본형 변수처럼 참조변수도 형변환이 가능하다. 단, 서로 상속관계에 있는 클래스 사이에서만 가능하기 때문에
 * 자손 타입의 참조변수를 조상타입의 참조변수로, 조상타입의 참조변수를 자손타입의 참조변수로의 형변환만 가능하다.
 *
 * 정리
 *
 * 서로 상속관계에 있는 타입간의 형변환은 양방향으로 자유롭게 수행될 수 있으나,
 * 참조 변수가 가리키는 인스턴스의 자손타입으로 형변환은 허용되지 않는다.
 * 그래서 참조변수가 가리키는 인스턴스의 타입이 무엇인지 먼저 확인하는 것이 중요하다.
 */
